name: Deploy new release
on:
  # allow to start infra of another env manually
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: environment
        required: true
      version:
        description: "Version to deploy"
        type: "string"
        required: true

permissions:
  id-token: write # This is required for requesting the JWT to auth via OIDC
  contents: read # This is required for actions/checkout

jobs:
  maintenance:
    name: Deploy Maintenance to ${{ inputs.environment }} environment
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    if: false # TODO: Remove !
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Maintenance
        uses: ./.github/actions/deploy-infra
        with:
          state: "restricted"
          environment: ${{ inputs.environment }}
          aws-role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_SECRET_AWS_ACCESS_KEY }}
          maintenance-header-name: ${{ secrets.MAINTENANCE_HEADER_NAME }}
          maintenance-header-secret: ${{ secrets.MAINTENANCE_HEADER_SECRET }}
          meilisearch-master-key: ${{ secrets.TF_MEILISEARCH_MASTER_KEY }}
          graasp-db-password: ${{ secrets.TF_GRAASP_DB_PASSWORD }}
          etherpad-db-password: ${{ secrets.TF_ETHERPAD_DB_PASSWORD }}
          umami-db-password: ${{ secrets.TF_VAR_UMAMI_DB_PASSWORD }}
          graasp-db-gatekeeper-key-name: ${{ secrets.TF_GRAASP_DB_GATEKEEPER_KEY_NAME }}
          gatekeeper-ami-id: ${{ vars.TF_DB_GATEKEEPER_AMI_ID }}
          gatekeeper-instance-type: ${{ vars.TF_DB_GATEKEEPER_INSTANCE_TYPE }}

  migration:
    name: Apply Migration to ${{ inputs.environment }} environment
    # needs: maintenance # TODO: uncomment!
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials to assume terraform Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          role-session-name: GitHub_Action_deploy_migration
          aws-region: ${{ vars.AWS_REGION }}

      - name: Pull migrate-${{ inputs.version }} and push as latest in private repo
        run: |
          migrate_image_tag=migrate-${{ inputs.version }}
          public_ecr_image=${{ vars.AWS_PUBLIC_ECR_URI }}/graasp:$migrate_image_tag
          docker pull --platform 'linux/amd64,linux/arm64' $public_ecr_image

          private_ecr=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          image_tag=$private_ecr/graasp:migrate-latest
          docker tag $(docker image inspect $public_ecr_image | jq -r ".[0].Id") $image_tag

          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin $private_ecr
          docker push $image_tag

      - name: Deploy Migration
        uses: ./.github/actions/deploy-infra
        with:
          state: "db-only"
          environment: ${{ inputs.environment }}
          aws-role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_SECRET_AWS_ACCESS_KEY }}
          maintenance-header-name: ${{ secrets.MAINTENANCE_HEADER_NAME }}
          maintenance-header-secret: ${{ secrets.MAINTENANCE_HEADER_SECRET }}
          meilisearch-master-key: ${{ secrets.TF_MEILISEARCH_MASTER_KEY }}
          graasp-db-password: ${{ secrets.TF_GRAASP_DB_PASSWORD }}
          etherpad-db-password: ${{ secrets.TF_ETHERPAD_DB_PASSWORD }}
          umami-db-password: ${{ secrets.TF_VAR_UMAMI_DB_PASSWORD }}
          graasp-db-gatekeeper-key-name: ${{ secrets.TF_GRAASP_DB_GATEKEEPER_KEY_NAME }}
          gatekeeper-ami-id: ${{ vars.TF_DB_GATEKEEPER_AMI_ID }}
          gatekeeper-instance-type: ${{ vars.TF_DB_GATEKEEPER_INSTANCE_TYPE }}

      # Need to re-log as the terraform role
      - name: Configure AWS Credentials to assume terraform Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          role-session-name: GitHub_Action_deploy_migration
          aws-region: ${{ vars.AWS_REGION }}

      # - name: Wait for migrations to be done
      #   run: |
      #     migration
      #     while [ $(aws logs tail '/ecs/migrate' | jq -r ".[0].DBInstanceStatus") != "available" ]
      #     do
      #       echo "waiting for DB to be up $(date -u +%H:%M:%S) (UTC)"
      #       sleep 30
      #     done

      - name: Pull core-${{ inputs.version }} and push as latest in private repo
        run: |
          core_image_tag=core-${{ inputs.version }}
          public_ecr_image=${{ vars.AWS_PUBLIC_ECR_URI }}/graasp:$core_image_tag
          docker logout ${{ vars.AWS_PUBLIC_ECR_URI }}
          docker pull --platform 'linux/amd64,linux/arm64' $public_ecr_image

          private_ecr=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          image_tag=$private_ecr/graasp:core-latest
          docker tag $(docker image inspect $public_ecr_image | jq -r ".[0].Id") $image_tag

          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin $private_ecr
          docker push $image_tag

      - name: Deploy New release
        uses: ./.github/actions/deploy-infra
        with:
          state: "running"
          environment: ${{ inputs.environment }}
          aws-role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_SECRET_AWS_ACCESS_KEY }}
          maintenance-header-name: ${{ secrets.MAINTENANCE_HEADER_NAME }}
          maintenance-header-secret: ${{ secrets.MAINTENANCE_HEADER_SECRET }}
          meilisearch-master-key: ${{ secrets.TF_MEILISEARCH_MASTER_KEY }}
          graasp-db-password: ${{ secrets.TF_GRAASP_DB_PASSWORD }}
          etherpad-db-password: ${{ secrets.TF_ETHERPAD_DB_PASSWORD }}
          umami-db-password: ${{ secrets.TF_VAR_UMAMI_DB_PASSWORD }}
          graasp-db-gatekeeper-key-name: ${{ secrets.TF_GRAASP_DB_GATEKEEPER_KEY_NAME }}
          gatekeeper-ami-id: ${{ vars.TF_DB_GATEKEEPER_AMI_ID }}
          gatekeeper-instance-type: ${{ vars.TF_DB_GATEKEEPER_INSTANCE_TYPE }}
