name: Deploy core version
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        type: environment
        required: true
      version:
        description: 'Version to deploy'
        type: 'string'
        required: true
      state:
        description: 'Expected infrastructure state'
        type: choice
        options:
          - running
          - restricted
        required: false
        # default to running
        default: running

permissions:
  id-token: write # This is required for requesting the JWT to auth via OIDC
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    name: Deploy core version ${{ inputs.version }} to ${{ inputs.environment }} environment
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 50
    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # skopeo is a tool to manage image between different registries:
        # https://github.com/containers/skopeo
      - name: Install skopeo
        run: sudo apt-get -y update && sudo apt-get -y install skopeo

        # configure credentials to assume terraform role
      - name: Configure AWS Credentials to assume terraform Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          role-session-name: GitHub_Action_deploy_core
          aws-region: ${{ vars.AWS_REGION }}

      - name: Ensure there is no migration still running
        run:
          if [[ $(aws ecs list-tasks --cluster graasp-${{ inputs.environment }} --family migrate | jq -r '.taskArns | length') -ne "0" ]]; then
          echo "# There is still a migration task running. please wait for it to complete" >> $GITHUB_STEP_SUMMARY;
          exit 1;
          fi

      - name: Deploy new core version
        run: |
          private_ecr_uri=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

          # login the skopeo client with the ECR credentials derived from the currently authenticated user
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | skopeo login --username AWS --password-stdin "$private_ecr_uri"

          for prefix in core workers; do
            image_tag=${prefix}-${{ inputs.version }}
            public_ecr_image=docker://${{ vars.AWS_PUBLIC_ECR_URI }}/graasp:$image_tag
            private_ecr_image=docker://$private_ecr_uri/graasp:${prefix}-latest

            echo "Copying $public_ecr_image to $private_ecr_image"
            skopeo --override-os linux copy "$public_ecr_image" "$private_ecr_image"
          done

      - name: Deploy Infra
        uses: ./.github/actions/deploy-infra
        with:
          state: ${{ inputs.state }}
          environment: ${{ inputs.environment }}
          aws-role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.TF_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TF_SECRET_AWS_ACCESS_KEY }}
          maintenance-header-name: ${{ secrets.MAINTENANCE_HEADER_NAME }}
          maintenance-header-secret: ${{ secrets.MAINTENANCE_HEADER_SECRET }}
          meilisearch-master-key: ${{ secrets.TF_MEILISEARCH_MASTER_KEY }}
          graasp-db-password: ${{ secrets.TF_GRAASP_DB_PASSWORD }}
          etherpad-db-password: ${{ secrets.TF_ETHERPAD_DB_PASSWORD }}
          umami-db-password: ${{ secrets.TF_VAR_UMAMI_DB_PASSWORD }}
          graasp-db-gatekeeper-key-name: ${{ secrets.TF_GRAASP_DB_GATEKEEPER_KEY_NAME }}
          graasper-id: ${{ vars.TF_VAR_GRAASPER_ID }}
          gatekeeper-ami-id: ${{ vars.TF_DB_GATEKEEPER_AMI_ID }}
          gatekeeper-instance-type: ${{ vars.TF_DB_GATEKEEPER_INSTANCE_TYPE }}
          apps-publisher-id: ${{ vars.TF_VAR_APPS_PUBLISHER_ID }}
          mailer-connection: ${{ secrets.TF_VAR_MAILER_CONNECTION }}
          sentry_dsn: ${{ secrets.TF_VAR_SENTRY_DSN }}
          openai_org_id: ${{ vars.TF_VAR_OPENAI_ORG_ID }}
          openai_api_key: ${{ secrets.TF_VAR_OPENAI_API_KEY }}
          recaptcha_secret_key: ${{ secrets.TF_VAR_RECAPTCHA_SECRET_KEY }}
          meilisearch_rebuild_secret: ${{ secrets.TF_VAR_MEILISEARCH_REBUILD_SECRET }}
          geolocation_api_key: ${{ secrets.TF_VAR_GEOLOCATION_API_KEY }}
          etherpad_api_key: ${{ secrets.TF_VAR_ETHERPAD_API_KEY }}
          h5p_access_key_id: ${{ secrets.TF_VAR_H5P_ACCESS_KEY_ID }}
          h5p_access_secret_key_id: ${{ secrets.TF_VAR_H5P_ACCESS_SECRET_KEY_ID }}
          s3_access_key_id: ${{ secrets.TF_VAR_S3_ACCESS_KEY_ID }}
          s3_access_secret_key_id: ${{ secrets.TF_VAR_S3_ACCESS_SECRET_KEY_ID }}
          apps_jwt_secret: ${{ secrets.TF_VAR_APPS_JWT_SECRET }}
          jwt_secret: ${{ secrets.TF_VAR_JWT_SECRET }}
          secure_session_secret_key: ${{ secrets.TF_VAR_SECURE_SESSION_SECRET_KEY }}
          password_reset_jwt_secret: ${{ secrets.TF_VAR_PASSWORD_RESET_JWT_SECRET }}
          email_change_jwt_secret: ${{ secrets.TF_VAR_EMAIL_CHANGE_JWT_SECRET }}
          umami_jwt_secret: ${{ secrets.TF_VAR_UMAMI_JWT_SECRET }}

        # configure credentials to assume terraform role
      - name: Configure AWS Credentials to assume terraform Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TF_AWS_ROLE_ARN }}
          role-session-name: GitHub_Action_deploy_core
          aws-region: ${{ vars.AWS_REGION }}

      - name: Force new deployment of core service
        run: |
          for service in core workers; do
            # force a new deployment of the service
            aws ecs update-service --cluster graasp-${{ inputs.environment }} --service ${service} --force-new-deployment
          done
