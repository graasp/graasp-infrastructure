name: Composite terraform CDK deploy workflow
description: Deploy the infrastructure in a specific state

inputs:
  state:
    description: 'Infra state'
    required: true
  environment:
    description: 'Environment to target'
    required: true
  aws-role-to-assume:
    description: 'AWS Role to assume to start/stop the DB'
    required: true
  aws-region:
    description: 'AWS Region for for the deployment'
    required: true
  aws-access-key-id:
    description: 'AWS Key id'
    required: true
  aws-secret-access-key:
    description: 'AWS secret key'
    required: true
  maintenance-header-name:
    description: 'Maintenance header name'
    required: true
  maintenance-header-secret:
    description: 'Maintenance header value'
    required: true
  meilisearch-master-key:
    description: 'Meilisearch master key'
    required: true
  graasp-db-password:
    description: 'Graasp DB password'
    required: true
  etherpad-db-password:
    description: 'Etherpad DB password'
    required: true
  umami-db-password:
    description: 'Umami DB password'
    required: true
  graasp-db-gatekeeper-key-name:
    description: 'Gatekeeper key name for auth'
    required: true
  graasper-id:
    description: 'Graasper user id used to fetch featured collections'
    required: true
  gatekeeper-ami-id:
    description: 'Gatekeeper AMI for machine setup'
    required: true
  gatekeeper-instance-type:
    description: 'Gatekeeper instance type'
    required: true
  apps-publisher-id:
    description: 'Apps publisher id'
    required: true
  mailer-connection:
    description: 'Mailer SMTP connection string'
    required: true
  sentry_dsn:
    description: 'Sentry DSN'
    required: true
  openai_org_id:
    description: 'Open AI org id'
    required: true
  openai_api_key:
    description: 'Open AI API key'
    required: true
  recaptcha_secret_key:
    description: 'Recaptcha secret key'
    required: true
  meilisearch_rebuild_secret:
    description: 'Meilisearch rebuild secret header'
    required: true
  geolocation_api_key:
    description: 'Geolocation API key'
    required: true
  etherpad_api_key:
    description: 'Etherpad API key'
    required: true
  h5p_access_key_id:
    description: 'H5P s3 bucket access key id'
    required: true
  h5p_access_secret_key_id:
    description: 'H5P s3 bucket access secret key id'
    required: true
  s3_access_key_id:
    description: 'S3 file bucket access key id'
    required: true
  s3_access_secret_key_id:
    description: 'S3 file bucket access secret key id'
    required: true
  apps_jwt_secret:
    description: 'Apps JWT secret'
    required: true
  jwt_secret:
    description: 'JWT secret for email login validation'
    required: true
  secure_session_secret_key:
    description: 'Secure session JWT secret'
    required: true
  password_reset_jwt_secret:
    description: 'Password reset JWT secret'
    required: true
  email_change_jwt_secret:
    description: 'Email change JWT secret'
    required: true
  umami_jwt_secret:
    description: 'Umami app secret (JWT signing)'
    required: true
  admin_secret_key_base:
    description: 'Admin secret key base'
    required: true
  admin_release_cookie:
    description: 'Admin release cookie'
    required: true
  admin_mailer_ses_access_key:
    description: 'Admin mailer access key'
    required: true
  admin_mailer_ses_secret:
    description: 'Admin mailer access secret'
    required: true

runs:
  using: composite
  steps:
    - name: Configure AWS Credentials to assume terraform Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-session-name: GitHub_Action_deploy_infrastructure
        aws-region: ${{ inputs.aws-region }}

    # This is a hack because there is a bug in the Terraform AWS provider where it is not possible to start a stopped instance
    # https://github.com/hashicorp/terraform-provider-aws/issues/40785
    - name: Start DB
      if: ${{ inputs.state != 'stopped' }}
      shell: bash
      run: |
        # ensure there is a DB
        if [ $(aws rds describe-db-instances | jq ".DBInstances | length") == "0" ]
        then
          echo "There is no DB to start."
          exit 1
        fi
        # start the db if it is in a "stopped" state
        if [ $(aws rds describe-db-instances | jq -r ".DBInstances.[0].DBInstanceStatus") == "stopped" ]
        then
          aws rds start-db-instance --db-instance-identifier graasp-${{ inputs.environment }} | jq -r ".DBInstance.DBInstanceStatus"
        fi
        while [ $(aws rds describe-db-instances | jq -r ".DBInstances.[0].DBInstanceStatus") != "available" ]
        do
          echo "waiting for DB to be up $(date -u +%H:%M:%S) (UTC)"
          sleep 30
        done
        echo "DB successfully started!"

    # - name: Stop DB
    #   if: ${{ inputs.state == 'stopped' }}
    #   shell: bash
    #   run: |
    #     # stop the db if it is in the "available" state
    #     if [ $(aws rds describe-db-instances | jq -r ".DBInstances.[0].DBInstanceStatus") == "available" ]
    #     then
    #       aws rds stop-db-instance --db-instance-identifier graasp-${{ inputs.environment }} | jq -r ".DBInstance.DBInstanceStatus"
    #     fi
    #     while [ $(aws rds describe-db-instances | jq -r ".DBInstances.[0].DBInstanceStatus") != "stopped" ]
    #     do
    #       echo "waiting for DB to be down $(date -u +%H:%M:%S) (UTC)"
    #       sleep 30
    #     done
    #     echo "DB successfully stopped!"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: yarn install
      shell: bash

    - name: Generate module and provider bindings
      run: npx cdktf get
      shell: bash

    - name: Configure AWS Credentials for terraform user
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Deploy Infra as "${{inputs.state }}" state to ${{ inputs.environment }} environment
      run: npx cdktf deploy --auto-approve 'graasp-${{ inputs.environment }}'
      shell: bash
      env:
        INFRA_STATE: ${{ inputs.state }}
        MAINTENANCE_HEADER_NAME: ${{ inputs.maintenance-header-name }}
        MAINTENANCE_HEADER_SECRET: ${{ inputs.maintenance-header-secret }}
        TF_VAR_MEILISEARCH_MASTER_KEY: ${{ inputs.meilisearch-master-key }}
        TF_VAR_GRAASP_DB_PASSWORD: ${{ inputs.graasp-db-password }}
        TF_VAR_ETHERPAD_DB_PASSWORD: ${{ inputs.etherpad-db-password }}
        TF_VAR_UMAMI_DB_PASSWORD: ${{ inputs.umami-db-password }}
        TF_VAR_GRAASP_DB_GATEKEEPER_KEY_NAME: ${{ inputs.graasp-db-gatekeeper-key-name }}
        TF_VAR_GRAASPER_ID: ${{ inputs.graasper-id }}
        TF_VAR_DB_GATEKEEPER_AMI_ID: ${{ inputs.gatekeeper-ami-id }}
        TF_VAR_DB_GATEKEEPER_INSTANCE_TYPE: ${{ inputs.gatekeeper-instance-type }}
        TF_VAR_APPS_PUBLISHER_ID: ${{ inputs.apps-publisher-id }}
        TF_VAR_MAILER_CONNECTION: ${{ inputs.mailer-connection }}
        TF_VAR_SENTRY_DSN: ${{ inputs.sentry_dsn }}
        TF_VAR_OPENAI_ORG_ID: ${{ inputs.openai_org_id }}
        TF_VAR_OPENAI_API_KEY: ${{ inputs.openai_api_key }}
        TF_VAR_RECAPTCHA_SECRET_KEY: ${{ inputs.recaptcha_secret_key }}
        TF_VAR_MEILISEARCH_REBUILD_SECRET: ${{ inputs.meilisearch_rebuild_secret }}
        TF_VAR_GEOLOCATION_API_KEY: ${{ inputs.geolocation_api_key }}
        TF_VAR_ETHERPAD_API_KEY: ${{ inputs.etherpad_api_key }}
        TF_VAR_H5P_ACCESS_KEY_ID: ${{ inputs.h5p_access_key_id }}
        TF_VAR_H5P_ACCESS_SECRET_KEY_ID: ${{ inputs.h5p_access_secret_key_id }}
        TF_VAR_S3_ACCESS_KEY_ID: ${{ inputs.s3_access_key_id }}
        TF_VAR_S3_ACCESS_SECRET_KEY_ID: ${{ inputs.s3_access_secret_key_id }}
        TF_VAR_APPS_JWT_SECRET: ${{ inputs.apps_jwt_secret }}
        TF_VAR_JWT_SECRET: ${{ inputs.jwt_secret }}
        TF_VAR_SECURE_SESSION_SECRET_KEY: ${{ inputs.secure_session_secret_key }}
        TF_VAR_PASSWORD_RESET_JWT_SECRET: ${{ inputs.password_reset_jwt_secret }}
        TF_VAR_EMAIL_CHANGE_JWT_SECRET: ${{ inputs.email_change_jwt_secret }}
        TF_VAR_UMAMI_JWT_SECRET: ${{ inputs.umami_jwt_secret }}
        TF_VAR_ADMIN_SECRET_KEY_BASE: ${{ inputs.admin_secret_key_base }}
        TF_VAR_ADMIN_RELEASE_COOKIE: ${{ inputs.admin_release_cookie }}
        TF_VAR_MAILER_SES_ACCESS_KEY: ${{ inputs.admin_mailer_ses_access_key }}
        TF_VAR_MAILER_SES_SECRET: ${{ inputs.admin_mailer_ses_secret }}

    - name: Configure AWS Credentials to assume terraform Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-session-name: GitHub_Action_deploy_infrastructure
        aws-region: ${{ inputs.aws-region }}

    - name: Invalidate Cloudfront distributions
      shell: bash
      # invalidate all cloudfront distributions
      # 1. get the distribution ids by calling "list-distributions" command
      # 2. pipe result to jq and return one distribution id per line
      # 3. use xargs to execute the invalidation call for each of the distribution Id in input, invalidating the whole bucket
      run: |
        aws cloudfront list-distributions \
        | jq -c ".DistributionList.Items.[].Id" \
        | xargs -L 1 -I {} aws cloudfront create-invalidation --distribution-id {} --paths '/'
